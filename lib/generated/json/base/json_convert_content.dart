// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter_demo/login/model/user_info_entity.dart';
import 'package:flutter_demo/generated/json/user_info_entity.g.dart';
import 'package:flutter_demo/tab/consultation_room/model/home_status_entity.dart';
import 'package:flutter_demo/generated/json/home_status_entity.g.dart';

JsonConvert jsonConvert = JsonConvert();

class JsonConvert {

  T? convert<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    return asT<T>(value);
  }

  List<T?>? convertList<T>(List? value) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((e) => asT<T>(e)).toList();
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return [];
    }
  }

  List<T>? convertListNotNull<T>(List? value) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((e) => asT<T>(e)!).toList();
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return [];
    }
  }
  T? asT<T extends Object?>(dynamic value) {
    if (value is T) {
      return value;
    }
		String type = T.toString();
    try {
      final String valueS = value.toString();
      if (type == "String") {
        return valueS as T;
      } else if (type == "int") {
        int? intValue = int.tryParse(valueS);
        if (intValue == null) {
          return double.tryParse(valueS)?.toInt() as T?;
        } else {
          return intValue as T;
        }      } else if (type == "double") {
        return double.parse(valueS) as T;
      } else if (type ==  "DateTime") {
        return DateTime.parse(valueS) as T;
      } else if (type ==  "bool") {
        if (valueS == '0' || valueS == '1') {
          return (valueS == '1') as T;
        }
        return (valueS == 'true') as T;
      } else {
        return JsonConvert.fromJsonAsT<T>(value);
      }
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return null;
    }
  } 
	//Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (UserInfoEntity).toString()){
			return UserInfoEntity.fromJson(json);
		}
		if(type == (UserInfoList).toString()){
			return UserInfoList.fromJson(json);
		}
		if(type == (UserInfoListDocInfo).toString()){
			return UserInfoListDocInfo.fromJson(json);
		}
		if(type == (UserInfoListLoginInfo).toString()){
			return UserInfoListLoginInfo.fromJson(json);
		}
		if(type == (UserInfoListRegisterInfo).toString()){
			return UserInfoListRegisterInfo.fromJson(json);
		}
		if(type == (HomeStatusEntity).toString()){
			return HomeStatusEntity.fromJson(json);
		}
		if(type == (HomeStatusInfo).toString()){
			return HomeStatusInfo.fromJson(json);
		}
		if(type == (HomeStatusInfoMsgInfo).toString()){
			return HomeStatusInfoMsgInfo.fromJson(json);
		}
		if(type == (HomeStatusInfoMenulist).toString()){
			return HomeStatusInfoMenulist.fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<UserInfoEntity>[] is M){
			return data.map<UserInfoEntity>((e) => UserInfoEntity.fromJson(e)).toList() as M;
		}
		if(<UserInfoList>[] is M){
			return data.map<UserInfoList>((e) => UserInfoList.fromJson(e)).toList() as M;
		}
		if(<UserInfoListDocInfo>[] is M){
			return data.map<UserInfoListDocInfo>((e) => UserInfoListDocInfo.fromJson(e)).toList() as M;
		}
		if(<UserInfoListLoginInfo>[] is M){
			return data.map<UserInfoListLoginInfo>((e) => UserInfoListLoginInfo.fromJson(e)).toList() as M;
		}
		if(<UserInfoListRegisterInfo>[] is M){
			return data.map<UserInfoListRegisterInfo>((e) => UserInfoListRegisterInfo.fromJson(e)).toList() as M;
		}
		if(<HomeStatusEntity>[] is M){
			return data.map<HomeStatusEntity>((e) => HomeStatusEntity.fromJson(e)).toList() as M;
		}
		if(<HomeStatusInfo>[] is M){
			return data.map<HomeStatusInfo>((e) => HomeStatusInfo.fromJson(e)).toList() as M;
		}
		if(<HomeStatusInfoMsgInfo>[] is M){
			return data.map<HomeStatusInfoMsgInfo>((e) => HomeStatusInfoMsgInfo.fromJson(e)).toList() as M;
		}
		if(<HomeStatusInfoMenulist>[] is M){
			return data.map<HomeStatusInfoMenulist>((e) => HomeStatusInfoMenulist.fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}